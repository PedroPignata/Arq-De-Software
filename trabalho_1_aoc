    .text
    .globl strlen
    .globl strcpy
    .globl strcmp
    .globl strcat
    .globl strncmp

# Entrada: a0 = ponteiro para string
# Saída:   a0 = tamanho da string

strlen:
    addi t0, x0, 0          # contador = 0
loop_strlen:
    lbu t1, 0(a0)           # carrega byte da string
    beq t1, x0, end_strlen  # se for '\0', fim
    addi a0, a0, 1          # avança ponteiro
    addi t0, t0, 1          # contador++
    j loop_strlen
end_strlen:
    mv a0, t0               # retorno = contador
    jr ra

# Entrada: a0 = dest, a1 = src
# Saída:   a0 = dest

strcpy:
    mv t2, a0               # salva ponteiro inicial de dest
copy_loop:
    lbu t0, 0(a1)           # lê char de src
    sb t0, 0(a0)            # escreve em dest
    beq t0, x0, copy_end    # se for '\0', acabou
    addi a0, a0, 1
    addi a1, a1, 1
    j copy_loop
copy_end:
    mv a0, t2               # retorna ponteiro original dest
    jr ra

# Entrada: a0 = s1, a1 = s2
# Saída:   a0 = 0 se iguais, <0 se s1<s2, >0 se s1>s2

strcmp:
loop_strcmp:
    lbu t0, 0(a0)
    lbu t1, 0(a1)
    bne t0, t1, diff        # se diferente, calcula retorno
    beq t0, x0, equal       # se ambos '\0', fim
    addi a0, a0, 1
    addi a1, a1, 1
    j loop_strcmp
diff:
    sub a0, t0, t1          # diferença
    jr ra
equal:
    li a0, 0
    jr ra

# Entrada: a0 = dest, a1 = src
# Saída:   a0 = dest

strcat:
    mv t2, a0               # salva início do dest
find_end:
    lbu t0, 0(a0)
    beq t0, x0, copy_concat
    addi a0, a0, 1
    j find_end
copy_concat:
    lbu t1, 0(a1)
    sb t1, 0(a0)
    beq t1, x0, end_concat
    addi a0, a0, 1
    addi a1, a1, 1
    j copy_concat
end_concat:
    mv a0, t2
    jr ra


# Entrada: a0 = s1, a1 = s2, a2 = n
# Saída:   a0 = 0 se iguais até n, <0 se s1<s2, >0 se s1>s2

strncmp:
    beq a2, x0, strncmp_eq  # n == 0 → iguais
loop_strncmp:
    lbu t0, 0(a0)
    lbu t1, 0(a1)
    bne t0, t1, strncmp_diff
    beq t0, x0, strncmp_eq  # terminou antes de n
    addi a0, a0, 1
    addi a1, a1, 1
    addi a2, a2, -1
    bnez a2, loop_strncmp
strncmp_eq:
    li a0, 0
    jr ra
strncmp_diff:
    sub a0, t0, t1
    jr ra

    .data
str1:   .string "Ola"
str2:   .string "Mundo"
buffer: .space 50

    .text
    .globl _start

_start:
    # Teste strlen("Ola") → deve dar 3
    la a0, str1
    jal ra, strlen

    # Teste strcpy(buffer, str1)
    la a0, buffer
    la a1, str1
    jal ra, strcpy

    # Teste strcmp("Ola","Mundo")
    la a0, str1
    la a1, str2
    jal ra, strcmp

    # Teste strcat(buffer,"Mundo")
    la a0, buffer
    la a1, str2
    jal ra, strcat

    # Teste strncmp("Ola","Oma",2) → compara só 2 letras
    la a0, str1
    la a1, str2
    li a2, 2
    jal ra, strncmp

end:
    j end
